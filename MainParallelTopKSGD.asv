% main Parallel TopK SGD 

% Generate the data set where 
% A is the matrix with m by n
% Each row of A represents each data point
% b is the vector with dimension m 
% Each element of b is the class label  \in {-1,1}. 
m = 1000;   n = 100; 
A = rand(m,n); 
b = sign(randn(m,1)); 

% Normalize each data point of A by its Euclidean norm
for i = 1:m
  A(i,:) = A(i,:)/norm(A(i,:));
  if mod(i,1000) == 0  
  fprintf('Normalize the data at row %d \n', i );     
  end    
end

% set up the number of iterations 
Iter = m*90;
% tune the parameters for the simplified TopK SGD
K = 50; 

%% we vary delta
num_group = 20; 
delta = [0; 0.00001; 0.0001; 0.001]; 
beta = 0.000001; 

Fcn_RandomizedK_delta = zeros(Iter,length(delta)); 
Coordinates_sent_RandomizedK_delta = zeros(Iter,length(delta));

Fcn_TopK_delta = zeros(Iter,length(delta)); 
Coordinates_sent_RandomizedK_delta = zeros(Iter,length(delta));


Y = 1.8;     % select 10% of the gradient 
Fcn_TopKCriterion_delta = zeros(Iter,length(delta)); 
Coordinates_sent_TopKCriterion_delta = zeros(Iter,length(delta));


for s = 1:length(delta)
[Fcn_TopKCriterion_delta(:,s), Coordinates_sent_TopKCriterion_delta(:,s)] = ...
ParallelTopKCriterion(A,b,Iter,beta,delta(s),num_group,Y); 
    
 [Fcn_RandomizedK_delta(:,s),Coordinates_sent_RandomizedK_delta(:,s)] = ...
    ParallelGradientSparfication(A,b,Iter,beta,delta(s),num_group,K); 

[Fcn_TopK_delta(:,s), Coordinates_sent_TopK_delta(:,s)] =...
ParallelTopKSGD(A,b,Iter,beta,delta(s),num_group,K); 
end
%%
% we vary beta 
delta = 0.0001; 
beta =  [ 0.0005 ;0.0001; 0.001];  
Fcn_beta = zeros(Iter,length(beta)); 
Coordinates_sent_beta = zeros(Iter,length(beta)); 


Fcn_RandomizedK_beta = zeros(Iter,length(beta)); 
Coordinates_sent_RandomizedK_delta = zeros(Iter,length(delta));

Fcn_TopK_delta = zeros(Iter,length(delta)); 
Coordinates_sent_RandomizedK_delta = zeros(Iter,length(delta));


Y = 1.8;     % select 10% of the gradient 
Fcn_TopKCriterion_delta = zeros(Iter,length(delta)); 
Coordinates_sent_TopKCriterion_delta = zeros(Iter,length(delta));

for s = 1:length(beta)
[Fcn_beta(:,s), Coordinates_sent_beta(:,s)] = ParallelTopKSGD(A,b,Iter,beta(s),delta,num_group,K); 
end


% % % plot the result 
% % plot the result when we vary delta 
% % figure()
% % grid('on')
% % hold on
% % semilogy([0:(Iter-1)]/m, Fcn_delta(:,1),...
% %           'color','b','linestyle',':','linewidth',2); 
% % semilogy([0:(Iter-1)]/m, Fcn_delta(:,2),...
% %           'color','k','linestyle','--','linewidth',2);      
% % semilogy([0:(Iter-1)]/m, Fcn_delta(:,3),...
% %          'color','k','linestyle','-','linewidth',2); 
% % xlabel('iteration counts$/m$','Interpreter','Latex');
% % ylabel('$f(x_k)$','Interpreter','Latex')
% % l= legend('Algorithm 1: $\delta = 0$',...
% %           'Algorithm 1: $\delta = 1e-5$',...
% %           'Algorithm 1: $\delta = 1e-4$');
% % set(l,'Interpreter','Latex','FontSize',8);     
% % 
% % plot the result when we vary beta
% % figure()
% % grid('on')
% % hold on
% % semilogy([0:(Iter-1)]/m, Fcn_beta(:,1),...
% %           'color','b','linestyle',':','linewidth',2); 
% % semilogy([0:(Iter-1)]/m, Fcn_beta(:,2),...
% %           'color','k','linestyle','--','linewidth',2);      
% % semilogy([0:(Iter-1)]/m, Fcn_beta(:,3),...
% %          'color','k','linestyle','-','linewidth',2); 
% % xlabel('iteration counts$/m$','Interpreter','Latex');
% % ylabel('$f(x_k)$','Interpreter','Latex')
% % l= legend('Algorithm 1: $\beta = 5e-4$',...
% %           'Algorithm 1: $\beta = 1e-4$',...
% %           'Algorithm 1: $\beta = 1e-3$');
% % set(l,'Interpreter','Latex','FontSize',8);  